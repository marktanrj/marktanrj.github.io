{"version":3,"sources":["Constants/theme.js","Components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","typography","fontFamily","join","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","useStyles","makeStyles","theme","drawer","breakpoints","up","width","flexShrink","appBar","zIndex","backgroundColor","color","margin","position","left","right","menuButton","marginRight","spacing","display","toolbar","minHeight","drawerPaper","content","flexGrow","padding","closeMenuButton","marginLeft","link","fontSize","NavigationBar","classes","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","List","ListItem","component","routerLink","button","onClick","to","key","ListItemText","href","target","Fragment","AppBar","className","elevation","Toolbar","IconButton","aria-label","edge","Grid","justify","container","item","Button","Link","style","textDecoration","Hidden","xsDown","implementation","smUp","Drawer","variant","anchor","direction","open","onClose","paper","ModalProps","keepMounted","HomePage","React","lazy","ProjectPage","App","location","useLocation","useLayoutEffect","_","defer","window","scrollTo","pathname","ThemeProvider","fallback","marginTop","exitBeforeEnter","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","Helmet","rel","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01d98a3b.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport default createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\"Barlow\", \"sans-serif\"].join(\",\"),\r\n  },\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: \"#ff4400\",\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      light: \"#0066ff\",\r\n      main: \"#0044ff\",\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: \"#ffcc00\",\r\n    },\r\n    // Used by `getContrastText()` to maximize the contrast between\r\n    // the background and the text.\r\n    contrastThreshold: 3,\r\n    // Used by the functions below to shift a color's luminance by approximately\r\n    // two indexes within its tonal palette.\r\n    // E.g., shift from Red 500 to Red 300 or Red 700.\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { Link as routerLink } from \"react-router-dom\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    backgroundColor: \"#F4F6FC\",\r\n    color: \"black\",\r\n    margin: 0,\r\n    position: \"fixed\",\r\n    width: \"100vw\",\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  toolbar: {\r\n    minHeight: \"50px\",\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  closeMenuButton: {\r\n    marginRight: \"auto\",\r\n    marginLeft: 0,\r\n  },\r\n  link: {\r\n    color: \"black\",\r\n    fontSize: \"20px\",\r\n  },\r\n}));\r\n\r\nexport default function NavigationBar() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  function handleDrawerToggle() {\r\n    setMobileOpen(!mobileOpen);\r\n  }\r\n\r\n  const drawer = (\r\n    <div>\r\n      <List>\r\n        <ListItem component={routerLink} button onClick={() => setMobileOpen(false)} to=\"/\" key=\"home\">\r\n          <ListItemText primary={\"Home\"} />\r\n        </ListItem>\r\n        <ListItem component=\"a\" button href=\"https://github.com/marktanrj\" target=\"_blank\" key=\"github\">\r\n          <ListItemText primary={\"Github\"} />\r\n        </ListItem>\r\n        <ListItem component=\"a\" button href=\"https://www.linkedin.com/in/marktanrj/\" target=\"_blank\" key=\"linkedin\">\r\n          <ListItemText primary={\"Linkedin\"} />\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"fixed\" className={classes.appBar} elevation={1}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton color=\"inherit\" aria-label=\"Open drawer\" edge=\"start\" onClick={handleDrawerToggle} className={classes.menuButton}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Grid justify=\"space-around\" container>\r\n            <Grid item>\r\n              <Button>\r\n                <Link to={\"/\"} component={routerLink} className={classes.link} style={{ textDecoration: \"none\" }}>\r\n                  Mark Tan\r\n                </Link>\r\n              </Button>\r\n            </Grid>\r\n            <Hidden xsDown implementation=\"css\">\r\n              <Grid item>\r\n                <Button>\r\n                  <Link href=\"https://github.com/marktanrj\" target=\"_blank\" className={classes.link} style={{ textDecoration: \"none\" }}>\r\n                    Github\r\n                  </Link>\r\n                </Button>\r\n                <span style={{ marginLeft: \"10px\" }} />\r\n                <Button>\r\n                  <Link\r\n                    href=\"https://www.linkedin.com/in/marktanrj/\"\r\n                    target=\"_blank\"\r\n                    className={classes.link}\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    Linkedin\r\n                  </Link>\r\n                </Button>\r\n              </Grid>\r\n            </Hidden>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <nav className={classes.drawer}>\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            <IconButton onClick={handleDrawerToggle} className={classes.closeMenuButton}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        {/* <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n          >\r\n            <div className={classes.toolbar} />\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden> */}\r\n      </nav>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useLayoutEffect, Suspense } from \"react\";\r\nimport \"./App.css\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport theme from \"./Constants/theme\";\r\n\r\nimport { Switch, Route, useLocation } from \"react-router-dom\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\nimport _ from \"lodash\";\r\n\r\n// const NavigationBar = React.lazy(() => import(\"./Components/NavigationBar\"));\r\nimport NavigationBar from \"./Components/NavigationBar\";\r\nconst HomePage = React.lazy(() => import(\"./Pages/HomePage\"));\r\nconst ProjectPage = React.lazy(() => import(\"./Pages/ProjectPage\"));\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  useLayoutEffect(() => {\r\n    _.defer(() => {\r\n      window.scrollTo(0, 0);\r\n    }, []);\r\n  }, [location.pathname]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"App\">\r\n        <NavigationBar />\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <div style={{ marginTop: \"60px\" }}>\r\n            <AnimatePresence exitBeforeEnter>\r\n              <Switch location={location} key={location.pathname}>\r\n                <Route exact path=\"/\" component={HomePage} />\r\n                <Route exact path=\"/project\" component={HomePage} />\r\n                <Route exact path=\"/project/:id\" component={ProjectPage} />\r\n              </Switch>\r\n            </AnimatePresence>\r\n          </div>\r\n        </Suspense>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Helmet>\r\n      <link href=\"https://fonts.googleapis.com/css2?family=Barlow&display=swap\" rel=\"stylesheet\" />\r\n    </Helmet>\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}